generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Job {
    id          String       @id @default(cuid())
    title       String
    jobposition String
    companyname String
    type        String
    salary      String
    hoursofwork String
    location    String
    lastdate    String
    createdAt   DateTime     @default(now())
    user        User         @relation(fields: [userId], references: [id])
    requests    JobRequest[]
    userId      String
}

model Resume {
    id        String   @id @default(cuid())
    url       String
    owner     User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @unique
}

enum Status {
    pending
    accepted
    declined
}

model JobRequest {
    id        String   @id @default(cuid())
    status    Status?  @default(pending)
    createdAt DateTime @default(now())
    job       Job      @relation(fields: [jobId], references: [id])
    jobId     String
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    @@unique([userId, jobId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    jobs          Job[]
    requests      JobRequest[]
    createdAt     DateTime     @default(now())
    resume        Resume?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
